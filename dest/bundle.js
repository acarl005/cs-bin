(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/home/andy/Documents/production/cs-bin/src/editor.js":[function(require,module,exports){
function checkForErrors(){return errWidgets}function renderErr(e,r,o){if(!e)throw new Error("Line number for renderErr must be a valid integer.");var i=$('\n    <div class="lint-error">\n      <span class="lint-error-icon">!</span>\n      '+r+"\n    </div>\n  ")[0];errWidgets.push(editor.addLineWidget(e-1,i,{coverGutter:!1,noHScroll:!0}))}function updateErrors(){var e=editor.getValue();errWidgets.forEach(function(e){editor.removeLineWidget(e)}),errWidgets=[];try{esprima.parse(e,{tolerant:!1,loc:!0});webWorker.postMessage(e),ps=setTimeout(killWorker,TIMEOUT)}catch(r){renderErr(r.lineNumber||r.line,r.description||r.message,r.column)}}function killWorker(){webWorker.terminate(),renderErr(1,"The code is taking a while. You might have an infinite loop."),spawnWorker()}function spawnWorker(){window.webWorker=new Worker("worker.js"),webWorker.onmessage=function(e){e.data.message&&renderErr(e.data.lineNumber,e.data.message),clearTimeout(ps)}}var TIMEOUT=1200,ps;spawnWorker(),window.onload=function(){window.editor=CodeMirror.fromTextArea(document.getElementById("code-editor"),{lineNumbers:!0,mode:"javascript",matchBrackets:!0,autoCloseBrackets:!0,keyMap:"sublime",tabSize:2,theme:"dracula"});var e;editor.on("change",function(){clearTimeout(e),e=setTimeout(updateErrors,TIMEOUT)});var r=require("./save");r(editor)},require("./resize");var errWidgets=[];window.replaceEditorText=function(e){editor.replaceRange(e,CodeMirror.Pos(editor.firstLine()-1),CodeMirror.Pos(editor.lastLine()))};var execute=require("./exec");execute(checkForErrors);

},{"./exec":"/home/andy/Documents/production/cs-bin/src/exec.js","./resize":"/home/andy/Documents/production/cs-bin/src/resize.js","./save":"/home/andy/Documents/production/cs-bin/src/save.js"}],"/home/andy/Documents/production/cs-bin/src/exec.js":[function(require,module,exports){
function render(e){var o=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];e="object"==typeof e?JSON.stringify(e,null,4):String(e),e=e.replace(/Unexpected end of input/,"Unexpected end of input: probably an extra opening bracket or operator."),o.arrow&&(e="=> "+e),o.error&&(e='<span class="stderr">'+e+"</span>"),o.lineNum&&(e=e.replace(/!/,"line "+o.lineNum+" - ")),$("#console #output").append('<p><span class="stdout">'+e+"</span></p>");var n=document.getElementById("console");n.scrollTop=n.scrollHeight}function repl(e){e.preventDefault();var code=$(e.target).find("input").val();commandStack.unshift(code),commandStack=commandStack.slice(0,9),commandIndex=-1,wrapLogOutput(function(){if($(e.target).find("input").val(""),code.match(/var/))return render("do var declarations in the editor above",{error:!0});var evalErr,output,wrappedCode="try{ "+code+"\n } catch(err) { evalErr = err }";try{output=eval(wrappedCode)}catch(err){evalErr=err}evalErr?render(evalErr.message,{error:!0}):render(output,{arrow:!0})})}function wrapLogOutput(e){console.nativeLog=console.log,console.log=function(){[].forEach.call(arguments,function(e){render(e)}),console.nativeLog.apply(console,arguments)},e(),console.log=console.nativeLog}module.exports=function(hasErrors){function execute(){$("#console #output").empty();var errors=hasErrors(),error=errors[0];if(error)return alertify.error("Code has errors. Not executing."),render(error.node.innerText||$(error.node).text(),{error:!0,lineNum:editor.getLineNumber(error.line)+1});var code=editor.getValue();return alertify.success("Executing "+code.split("\n").length+" lines of javascript."),wrapLogOutput(function(){eval(code),console.log("\n"),$("#console form").off("submit"),$("#console form").on("submit",eval("("+String(repl)+")"))}),!0}$(document).ready(function(){$("#console form").on("submit",repl),$("#console").on("click",function(e){$("input").focus()}),$("#execute").on("click",execute),$(window).on("keydown",function(e){e.ctrlKey&&83===e.keyCode&&(e.preventDefault(),execute()&&showConsole())}),$("#console form").on("keydown",function(e){if(38===e.keyCode)commandIndex++;else{if(40!==e.keyCode)return"we can ignore this";commandIndex--}commandIndex=Math.min(commandStack.length-1,commandIndex),commandIndex=Math.max(-1,commandIndex),$("#console form input").val(commandStack[commandIndex])})})};var commandStack=[],commandIndex=-1;

},{}],"/home/andy/Documents/production/cs-bin/src/resize.js":[function(require,module,exports){
function pxToNum(e){return+e.slice(0,-2)}var saveHeights,editorHeight,consoleHeight,originalEditorHeight,originalConsoleHeight,startY=0,y=0,$editor,$console,$document=$(document);$document.ready(function(e){function o(e){if(y=e.pageY-startY,!(y+pxToNum(originalEditorHeight)>window.innerHeight-50)){var o=String(y)+"px",i="+-";"-"===o[0]&&(o=o.slice(1),i="-+"),$editor.css("height","calc("+originalEditorHeight+" "+i[0]+" "+o+")"),$console.css("height","calc("+originalConsoleHeight+" "+i[1]+" "+o+")")}}function i(){$document.off("mousemove",o),$document.off("mouseup",i),editor.refresh()}var t=$(".resize");$editor=$("#editor-wrap"),$console=$("#console"),originalEditorHeight=$editor.css("height"),originalConsoleHeight=$console.css("height"),t.on("mousedown",function(e){e.preventDefault(),startY=e.pageY-y,$document.on("mousemove",o),$document.on("mouseup",i)}),saveHeights=function(){editorHeight=$editor.css("height"),consoleHeight=$console.css("height")},saveHeights(),hideConsole(),$("#execute").on("click",showConsole),$("#close").on("click",hideConsole)}),window.hideConsole=function(){saveHeights(),$("#black-stuff").hide(),$("#editor-wrap").css("height","100vh");try{editor.refresh()}catch(e){}},window.showConsole=function(){"none"===$("#black-stuff").css("display")&&($("#black-stuff").show(),$("#console").css("height",consoleHeight),$("#editor-wrap").css("height",editorHeight),editor.refresh())};

},{}],"/home/andy/Documents/production/cs-bin/src/save.js":[function(require,module,exports){
module.exports=function(e){var r=window.location.pathname;$("#save").on("click",function(o){localStorage.setItem(r,e.getValue()),alertify.success("Progress saved.")});var o=localStorage.getItem(r);o&&replaceEditorText(o),$("#clear").on("click",function(e){var o="Are you sure? This will remove saved progress and restore the challenges to their former state.";alertify.confirm(o,function(e){e&&(localStorage.removeItem(r),replaceEditorText($("#code-editor").val()),alertify.error("Saved progress removed."))})})};

},{}]},{},["/home/andy/Documents/production/cs-bin/src/editor.js"])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
