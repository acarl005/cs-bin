(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/home/andy/Desktop/production/cs-bin/src/exec.js":[function(require,module,exports){
function render(e){var r=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];e="object"==typeof e?JSON.stringify(e,null,4):String(e),e=e.replace(/Unexpected end of input/,"Unexpected end of input: probably an extra opening bracket or operator."),r.arrow&&(e="=> "+e),r.error&&(e='<span class="error">'+e+"</span>"),r.lineNum&&(e=e.replace(/!/,"line "+r.lineNum+" - ")),$("#console #output").append("<p>"+e+"</p>");var o=document.getElementById("console");o.scrollTop=o.scrollHeight}function repl(e){e.preventDefault();var code=$(e.target).find("input").val();commandStack.unshift(code),commandStack=commandStack.slice(0,9),commandIndex=-1,wrapLogOutput(function(){if($(e.target).find("input").val(""),code.match(/var/))return render("do var declarations in the editor above",{error:!0});var evalErr,wrappedCode="try{ "+code+"\n } catch(err) { evalErr = err }";try{var output=eval(wrappedCode)}catch(err){evalErr=err}evalErr?render(evalErr.message,{error:!0}):render(output,{arrow:!0})})}function wrapLogOutput(e){console.nativeLog=console.log,console.log=function(){[].forEach.call(arguments,function(e){render(e)}),console.nativeLog.apply(console,arguments)},e(),console.log=console.nativeLog}module.exports=function(hasErrors){function execute(){$("#console #output").empty();var errors=hasErrors(),error=errors[0];if(error)return render(error.node.innerText||$(error.node).text(),{error:!0,lineNum:editor.getLineNumber(error.line)+1});var code=editor.getValue();wrapLogOutput(function(){eval(code),$("#console form").off("submit"),$("#console form").on("submit",eval("("+String(repl)+")"))})}$(document).ready(function(){$("#console form").on("submit",repl),$("#execute").on("click",execute),$(window).on("keypress",function(e){e.ctrlKey&&e.keyCode&&execute()}),$("#console form").on("keydown",function(e){if(38===e.keyCode)commandIndex++;else{if(40!==e.keyCode)return"we can ignore this";commandIndex--}commandIndex=Math.min(commandStack.length-1,commandIndex),commandIndex=Math.max(-1,commandIndex),$("#console form input").val(commandStack[commandIndex])})})};var commandStack=[],commandIndex=-1;

},{}],"/home/andy/Desktop/production/cs-bin/src/repl.js":[function(require,module,exports){
function checkForErrors(){return errWidgets}function renderErr(r,e,t){if(!r)throw new Error("Line number for renderErr must be a valid integer.");var o=$('\n    <div class="lint-error">\n      <span class="lint-error-icon">!</span>\n      '+e+"\n    </div>\n  ")[0];errWidgets.push(editor.addLineWidget(r-1,o,{coverGutter:!1,noHScroll:!0}))}function updateErrors(){var code=editor.getValue();errWidgets.forEach(function(r){editor.removeLineWidget(r)}),errWidgets=[];try{var syntax=esprima.parse(code,{tolerant:!0,loc:!0}),evalErr,wrappedCode="try{ "+code+"\n } catch(err) { evalErr = err }";if(eval(wrappedCode),evalErr){var stack=evalErr.stack,errMessage=evalErr.message||stack.match(/.*/)[0],lineNum=evalErr.lineNumber||stack.match(/<anonymous>:(\d+):\d+/)[1];renderErr(lineNum,errMessage)}}catch(err){renderErr(err.lineNumber,err.description,err.column)}}window.onload=function(){window.editor=CodeMirror.fromTextArea(document.getElementById("code-editor"),{lineNumbers:!0,mode:"javascript",matchBrackets:!0,autoCloseBrackets:!0,keyMap:"sublime",tabSize:2,theme:"ttcn"});var r;editor.on("change",function(){clearTimeout(r),r=setTimeout(updateErrors,800)});var e=require("./save");e(editor)};var errWidgets=[];window.replaceEditorText=function(r){editor.replaceRange(r,CodeMirror.Pos(editor.firstLine()-1),CodeMirror.Pos(editor.lastLine()))};var execute=require("./exec");execute(checkForErrors);

},{"./exec":"/home/andy/Desktop/production/cs-bin/src/exec.js","./save":"/home/andy/Desktop/production/cs-bin/src/save.js"}],"/home/andy/Desktop/production/cs-bin/src/save.js":[function(require,module,exports){
module.exports=function(e){var o=window.location.pathname;$("#save").on("click",function(r){localStorage.setItem(o,e.getValue()),alert("Progress saved.")});var r=localStorage.getItem(o);r&&replaceEditorText(r),$("#clear").on("click",function(e){confirm("Are you sure? This will remove saved progress.")&&(localStorage.removeItem(o),replaceEditorText($("#code-editor").val()))})};

},{}]},{},["/home/andy/Desktop/production/cs-bin/src/repl.js"])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
