(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/codesmith/Documents/cs-bin/src/editor.js":[function(require,module,exports){
function checkForErrors(){return errWidgets}function renderErr(e,r,o){if(!e)throw new Error("Line number for renderErr must be a valid integer.");var i=$('\n    <div class="lint-error">\n      <span class="lint-error-icon">!</span>\n      '+r+"\n    </div>\n  ")[0];errWidgets.push(editor.addLineWidget(e-1,i,{coverGutter:!1,noHScroll:!0}))}function updateErrors(){var e=editor.getValue();errWidgets.forEach(function(e){editor.removeLineWidget(e)}),errWidgets=[];try{esprima.parse(e,{tolerant:!1,loc:!0});webWorker.postMessage(e),ps=setTimeout(killWorker,TIMEOUT)}catch(r){renderErr(r.lineNumber||r.line,r.description||r.message,r.column)}}function killWorker(){webWorker.terminate(),renderErr(1,"The code is taking a while. You might have an infinite loop."),spawnWorker()}function spawnWorker(){window.webWorker=new Worker("worker.js"),webWorker.onmessage=function(e){e.data.message&&renderErr(e.data.lineNumber,e.data.message),clearTimeout(ps)}}var TIMEOUT=800,ps;spawnWorker(),window.onload=function(){window.editor=CodeMirror.fromTextArea(document.getElementById("code-editor"),{lineNumbers:!0,mode:"javascript",matchBrackets:!0,autoCloseBrackets:!0,keyMap:"sublime",tabSize:2,theme:"ttcn"});var e;editor.on("change",function(){clearTimeout(e),e=setTimeout(updateErrors,TIMEOUT)});var r=require("./save");r(editor)},require("./resize");var errWidgets=[];window.replaceEditorText=function(e){editor.replaceRange(e,CodeMirror.Pos(editor.firstLine()-1),CodeMirror.Pos(editor.lastLine()))};var execute=require("./exec");execute(checkForErrors);

},{"./exec":"/Users/codesmith/Documents/cs-bin/src/exec.js","./resize":"/Users/codesmith/Documents/cs-bin/src/resize.js","./save":"/Users/codesmith/Documents/cs-bin/src/save.js"}],"/Users/codesmith/Documents/cs-bin/src/exec.js":[function(require,module,exports){
function render(e){var o=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];e="object"==typeof e?JSON.stringify(e,null,4):String(e),e=e.replace(/Unexpected end of input/,"Unexpected end of input: probably an extra opening bracket or operator."),o.arrow&&(e="=> "+e),o.error&&(e='<span class="error">'+e+"</span>"),o.lineNum&&(e=e.replace(/!/,"line "+o.lineNum+" - ")),$("#console #output").append("<p>"+e+"</p>");var r=document.getElementById("console");r.scrollTop=r.scrollHeight}function repl(e){e.preventDefault();var code=$(e.target).find("input").val();commandStack.unshift(code),commandStack=commandStack.slice(0,9),commandIndex=-1,wrapLogOutput(function(){if($(e.target).find("input").val(""),code.match(/var/))return render("do var declarations in the editor above",{error:!0});var evalErr,wrappedCode="try{ "+code+"\n } catch(err) { evalErr = err }";try{var output=eval(wrappedCode)}catch(err){evalErr=err}evalErr?render(evalErr.message,{error:!0}):render(output,{arrow:!0})})}function wrapLogOutput(e){console.nativeLog=console.log,console.log=function(){[].forEach.call(arguments,function(e){render(e)}),console.nativeLog.apply(console,arguments)},e(),console.log=console.nativeLog}module.exports=function(hasErrors){function execute(){$("#console #output").empty();var errors=hasErrors(),error=errors[0];if(error)return alertify.error("Code has errors. Not executing."),render(error.node.innerText||$(error.node).text(),{error:!0,lineNum:editor.getLineNumber(error.line)+1});var code=editor.getValue();return alertify.success("Executing "+code.split("\n").length+" lines of javascript."),wrapLogOutput(function(){eval(code),console.log("\n"),$("#console form").off("submit"),$("#console form").on("submit",eval("("+String(repl)+")"))}),!0}$(document).ready(function(){$("#console form").on("submit",repl),$("#console").on("click",function(e){$("input").focus()}),$("#execute").on("click",execute),$(window).on("keydown",function(e){e.ctrlKey&&83===e.keyCode&&(e.preventDefault(),execute()&&showConsole())}),$("#console form").on("keydown",function(e){if(38===e.keyCode)commandIndex++;else{if(40!==e.keyCode)return"we can ignore this";commandIndex--}commandIndex=Math.min(commandStack.length-1,commandIndex),commandIndex=Math.max(-1,commandIndex),$("#console form input").val(commandStack[commandIndex])})})};var commandStack=[],commandIndex=-1;

},{}],"/Users/codesmith/Documents/cs-bin/src/resize.js":[function(require,module,exports){
function pxToNum(e){return+e.slice(0,-2)}var refreshHeights,editorHeight,consoleHeight;$(document).ready(function(e){refreshHeights=function(){editorHeight=$("#editor-wrap").css("height"),consoleHeight=$("#console").css("height")},refreshHeights(),$(".resize").draggable({axis:"y",drag:function(e){var o=e.target.style.top;if(!(pxToNum(o)+pxToNum(editorHeight)>window.innerHeight-50)){var s="+-";"-"===o[0]&&(o=o.slice(1),s="-+"),$("#editor-wrap").css("height","calc("+editorHeight+" "+s[0]+" "+o+")"),$("#console").css("height","calc("+consoleHeight+" "+s[1]+" "+o+")")}},stop:function(e){refreshHeights(),e.target.style.top=0,editor.refresh()}}),hideConsole(),$("#execute").on("click",showConsole),$("#close").on("click",hideConsole)}),window.hideConsole=function(){$("#black-stuff").hide(),$("#editor-wrap").css("height","100vh");try{editor.refresh()}catch(e){}},window.showConsole=function(){"none"===$("#black-stuff").css("display")&&($("#black-stuff").show(),$("#console").css("height","33.5vh"),$("#editor-wrap").css("height","65vh"),refreshHeights(),editor.refresh())};

},{}],"/Users/codesmith/Documents/cs-bin/src/save.js":[function(require,module,exports){
module.exports=function(e){var r=window.location.pathname;$("#save").on("click",function(o){localStorage.setItem(r,e.getValue()),alertify.success("Progress saved.")});var o=localStorage.getItem(r);o&&replaceEditorText(o),$("#clear").on("click",function(e){var o="Are you sure? This will remove saved progress and restore the challenges to their former state.";alertify.confirm(o,function(e){e&&(localStorage.removeItem(r),replaceEditorText($("#code-editor").val()),alertify.error("Saved progress removed."))})})};

},{}]},{},["/Users/codesmith/Documents/cs-bin/src/editor.js"])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
