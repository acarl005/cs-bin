(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/home/andy/Desktop/production/cs-bin/src/exec.js":[function(require,module,exports){
module.exports = function (hasErrors) {
  $(document).ready(function () {

    $('#console form').on('submit', repl);
    $('#execute').on('click', execute);
    $(window).on('keypress', function (e) {
      e.ctrlKey && e.keyCode && execute(); //execute if they press ctrl+b in chrome
    });

    $('#console form').on('keydown', function (e) {
      if (e.keyCode === 38) {
        //up arrow key
        commandIndex++;
      } else if (e.keyCode === 40) {
        //down arrow key
        commandIndex--;
      } else {
        return 'we can ignore this';
      }
      // make sure commandIndex stays in reasonable range
      commandIndex = Math.min(commandStack.length - 1, commandIndex);
      commandIndex = Math.max(-1, commandIndex);
      $('#console form input').val(commandStack[commandIndex]);
    });
  });

  function execute() {
    $('#console #output').empty();
    var errors = hasErrors();
    var error = errors[0];
    if (error) {
      return render(error.node.innerText || $(error.node).text(), // chrome || firefox
      { error: true, lineNum: editor.getLineNumber(error.line) + 1 });
    }

    var code = editor.getValue();

    wrapLogOutput(function () {

      eval(code);

      $('#console form').off('submit');
      $('#console form').on('submit', eval('(' + String(repl) + ')'));
      // this eval/String thing is pretty weird right? It's basically a hack that Rob and I devised to "clone" a function. It takes a func, converts to a string, then redefines it in an eval. This effectively achieves dynamic scoping. By redefining it in this scope, I can access the local variables here instead of the default lexical scoping behavior. The reason I want this is so the repl has access to the variables defined in the CodeMirror editor.
    });
  }
};

// allow user to access previously entered commands
var commandStack = [];
var commandIndex = -1;

function render(text) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  if (typeof text === 'object') {
    text = JSON.stringify(text, null, 4);
  } else {
    text = String(text);
  }

  // This particular err message is poor. Make it a bit more helpful
  text = text.replace(/Unexpected end of input/, 'Unexpected end of input: probably an extra opening bracket or operator.');

  if (options.arrow) text = '=> ' + text;
  if (options.error) text = '<span class="error">' + text + '</span>';
  if (options.lineNum) text = text.replace(/!/, 'line ' + options.lineNum + ' - ');
  $('#console #output').append('<p>' + text + '</p>');

  // scroll to bottom in order to show most recent
  var consoleDOM = document.getElementById('console');
  consoleDOM.scrollTop = consoleDOM.scrollHeight;
}

function repl(e) {
  e.preventDefault();
  var code = $(e.target).find('input').val();
  commandStack.unshift(code);
  commandStack = commandStack.slice(0, 9);
  commandIndex = -1;
  wrapLogOutput(function () {
    $(e.target).find('input').val('');

    //var declarations don't work in the REPL, so give them an error
    if (code.match(/var/)) return render('do var declarations in the editor above', { error: true });

    var evalErr;
    var wrappedCode = 'try{ ' + code + '\n } catch(err) { evalErr = err }';
    try {
      var output = eval(wrappedCode);
    } catch (err) {
      evalErr = err;
    }
    if (evalErr) {
      render(evalErr.message, { error: true });
    } else {
      render(output, { arrow: true });
    }
  });
}

// executes a function in a context where all calls to console.log will render to the DOM
function wrapLogOutput(func) {
  console.nativeLog = console.log;
  console.log = function () {
    [].forEach.call(arguments, function (line) {
      render(line);
    });
    console.nativeLog.apply(console, arguments);
  };
  func();
  console.log = console.nativeLog;
}

},{}],"/home/andy/Desktop/production/cs-bin/src/repl.js":[function(require,module,exports){
window.onload = function () {

  window.editor = CodeMirror.fromTextArea(document.getElementById("code-editor"), {
    lineNumbers: true,
    mode: "javascript",
    matchBrackets: true,
    autoCloseBrackets: true,
    keyMap: 'sublime',
    tabSize: 2,
    theme: 'ttcn'
  });

  var waiting;
  editor.on("change", function () {
    clearTimeout(waiting);
    waiting = setTimeout(updateErrors, 800);
  });

  var save = require('./save');
  save(editor);
};

var errWidgets = [];

function checkForErrors() {
  return errWidgets;
}

function renderErr(lineNum, desc, colNum) {
  if (!lineNum) throw new Error('Line number for renderErr must be a valid integer.');
  var msg = $("\n    <div class=\"lint-error\">\n      <span class=\"lint-error-icon\">!</span>\n      " + desc + "\n    </div>\n  ")[0];
  errWidgets.push(editor.addLineWidget(lineNum - 1, msg, { coverGutter: false, noHScroll: true }));
}

function updateErrors() {
  var code = editor.getValue();

  errWidgets.forEach(function (err) {
    editor.removeLineWidget(err);
  });
  errWidgets = [];

  try {
    var syntax = esprima.parse(code, { tolerant: true, loc: true });
    var evalErr;
    var wrappedCode = "try{ " + code + "\n } catch(err) { evalErr = err }";

    eval(wrappedCode);
    if (evalErr) {
      var stack = evalErr.stack;
      var errMessage = evalErr.message || stack.match(/.*/)[0]; // firefox || chrome
      var lineNum = evalErr.lineNumber || stack.match(/<anonymous>:(\d+):\d+/)[1];
      // var colNum = evalErr.columnNumber || stack.match(/<anonymous>:\d+:(\d+)/)[0];
      renderErr(lineNum, errMessage);
    }
  } catch (err) {
    renderErr(err.lineNumber, err.description, err.column);
  }
}

window.replaceEditorText = function (text) {
  editor.replaceRange(text, CodeMirror.Pos(editor.firstLine() - 1), CodeMirror.Pos(editor.lastLine()));
};

var execute = require('./exec');
execute(checkForErrors);
require('./resize');

},{"./exec":"/home/andy/Desktop/production/cs-bin/src/exec.js","./resize":"/home/andy/Desktop/production/cs-bin/src/resize.js","./save":"/home/andy/Desktop/production/cs-bin/src/save.js"}],"/home/andy/Desktop/production/cs-bin/src/resize.js":[function(require,module,exports){
$(document).ready(function (e) {

  var editorHeight = $('#editor-wrap').css('height');
  var consoleHeight = $('#console').css('height');

  $('.resize').draggable({
    axis: 'y',
    drag: function drag(e) {
      var change = e.target.style.top;
      var oper = '+-';
      if (change[0] === '-') {
        change = change.slice(1);
        oper = '-+';
      }
      $('#editor-wrap').css('height', 'calc(' + editorHeight + ' ' + oper[0] + ' ' + change + ')');
      $('#console').css('height', 'calc(' + consoleHeight + ' ' + oper[1] + ' ' + change + ')');
    },
    stop: function stop(e) {
      editorHeight = $('#editor-wrap').css('height');
      consoleHeight = $('#console').css('height');
      e.target.style.top = 0;
      editor.refresh();
    }
  });
});

},{}],"/home/andy/Desktop/production/cs-bin/src/save.js":[function(require,module,exports){
module.exports = function (editor) {

  var path = window.location.pathname;

  $('#save').on('click', function (e) {
    localStorage.setItem(path, editor.getValue());
    alert('Progress saved.');
  });

  var saved = localStorage.getItem(path);
  if (saved) {
    replaceEditorText(saved);
  }

  $('#clear').on('click', function (e) {
    if (confirm('Are you sure? This will remove saved progress.')) {
      localStorage.removeItem(path);
      replaceEditorText($('#code-editor').val());
    }
  });
};

},{}]},{},["/home/andy/Desktop/production/cs-bin/src/repl.js"])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvaG9tZS9hbmR5L0Rlc2t0b3AvcHJvZHVjdGlvbi9jcy1iaW4vc3JjL2V4ZWMuanMiLCIvaG9tZS9hbmR5L0Rlc2t0b3AvcHJvZHVjdGlvbi9jcy1iaW4vc3JjL3JlcGwuanMiLCIvaG9tZS9hbmR5L0Rlc2t0b3AvcHJvZHVjdGlvbi9jcy1iaW4vc3JjL3Jlc2l6ZS5qcyIsIi9ob21lL2FuZHkvRGVza3RvcC9wcm9kdWN0aW9uL2NzLWJpbi9zcmMvc2F2ZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBLE1BQU0sQ0FBQyxPQUFPLEdBQUcsVUFBUyxTQUFTLEVBQUU7QUFDbkMsR0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxZQUFNOztBQUV0QixLQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN0QyxLQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNuQyxLQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxVQUFBLENBQUMsRUFBSTtBQUM1QixPQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxPQUFPLElBQUksT0FBTyxFQUFFLENBQUM7S0FDckMsQ0FBQyxDQUFDOztBQUVILEtBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLFVBQUEsQ0FBQyxFQUFJO0FBQ3BDLFVBQUksQ0FBQyxDQUFDLE9BQU8sS0FBSyxFQUFFLEVBQUU7O0FBQ3BCLG9CQUFZLEVBQUUsQ0FBQztPQUNoQixNQUFNLElBQUksQ0FBQyxDQUFDLE9BQU8sS0FBSyxFQUFFLEVBQUU7O0FBQzNCLG9CQUFZLEVBQUUsQ0FBQztPQUNoQixNQUFNO0FBQ0ws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QyxDQUFDO0FBQ3ZDLE1BQUksS0FBSyxFQUFFO0FBQ1QscUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDMUI7O0FBRUQsR0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsVUFBQSxDQUFDLEVBQUk7QUFDM0IsUUFBSSxPQUFPLENBQUMsZ0RBQWdELENBQUMsRUFBRTtBQUM3RCxrQkFBWSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM5Qix1QkFBaUIsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztLQUM1QztHQUNGLENBQUMsQ0FBQztDQUVKLENBQUEiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihoYXNFcnJvcnMpIHtcbiAgJChkb2N1bWVudCkucmVhZHkoKCkgPT4ge1xuXG4gICAgJCgnI2NvbnNvbGUgZm9ybScpLm9uKCdzdWJtaXQnLCByZXBsKTtcbiAgICAkKCcjZXhlY3V0ZScpLm9uKCdjbGljaycsIGV4ZWN1dGUpO1xuICAgICQod2luZG93KS5vbigna2V5cHJlc3MnLCBlID0+IHtcbiAgICAgIGUuY3RybEtleSAmJiBlLmtleUNvZGUgJiYgZXhlY3V0ZSgpOyAgIC8vZXhlY3V0ZSBpZiB0aGV5IHByZXNzIGN0cmwrYiBpbiBjaHJvbWVcbiAgICB9KTtcblxuICAgICQoJyNjb25zb2xlIGZvcm0nKS5vbigna2V5ZG93bicsIGUgPT4ge1xuICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMzgpIHsgIC8vdXAgYXJyb3cga2V5XG4gICAgICAgIGNvbW1hbmRJbmRleCsrO1xuICAgICAgfSBlbHNlIGlmIChlLmtleUNvZGUgPT09IDQwKSB7ICAvL2Rvd24gYXJyb3cga2V5XG4gICAgICAgIGNvbW1hbmRJbmRleC0tO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICd3ZSBjYW4gaWdub3JlIHRoaXMnO1xuICAgICAgfVxuICAgICAgLy8gbWFrZSBzdXJlIGNvbW1hbmRJbmRleCBzdGF5cyBpbiByZWFzb25hYmxlIHJhbmdlXG4gICAgICBjb21tYW5kSW5kZXggPSBNYXRoLm1pbihjb21tYW5kU3RhY2subGVuZ3RoIC0gMSwgY29tbWFuZEluZGV4KTtcbiAgICAgIGNvbW1hbmRJbmRleCA9IE1hdGgubWF4KC0xLCBjb21tYW5kSW5kZXgpO1xuICAgICAgJCgnI2NvbnNvbGUgZm9ybSBpbnB1dCcpLnZhbChjb21tYW5kU3RhY2tbY29tbWFuZEluZGV4XSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGV4ZWN1dGUoKSB7XG4gICAgJCgnI2NvbnNvbGUgI291dHB1dCcpLmVtcHR5KCk7XG4gICAgdmFyIGVycm9ycyA9IGhhc0Vycm9ycygpO1xuICAgIHZhciBlcnJvciA9IGVycm9yc1swXTtcbiAgICBpZiAoZXJyb3Ipe1xuICAgICAgcmV0dXJuIHJlbmRlcihcbiAgICAgICAgZXJyb3Iubm9kZS5pbm5lclRleHQgfHwgJChlcnJvci5ub2RlKS50ZXh0KCksICAgIC8vIGNocm9tZSB8fCBmaXJlZm94XG4gICAgICAgIHsgZXJyb3I6IHRydWUsIGxpbmVOdW06IGVkaXRvci5nZXRMaW5lTnVtYmVyKGVycm9yLmxpbmUpICsgMSB9XG4gICAgICApO1xuICAgIH1cblxuICAgIHZhciBjb2RlID0gZWRpdG9yLmdldFZhbHVlKCk7XG5cbiAgICB3cmFwTG9nT3V0cHV0KCgpID0+IHtcblxuICAgICAgZXZhbChjb2RlKTtcblxuICAgICAgJCgnI2NvbnNvbGUgZm9ybScpLm9mZignc3VibWl0Jyk7XG4gICAgICAkKCcjY29uc29sZSBmb3JtJykub24oJ3N1Ym1pdCcsIGV2YWwoJygnK1N0cmluZyhyZXBsKSsnKScpKTtcbiAgICAgIC8vIHRoaXMgZXZhbC9TdHJpbmcgdGhpbmcgaXMgcHJldHR5IHdlaXJkIHJpZ2h0PyBJdCdzIGJhc2ljYWxseSBhIGhhY2sgdGhhdCBSb2IgYW5kIEkgZGV2aXNlZCB0byBcImNsb25lXCIgYSBmdW5jdGlvbi4gSXQgdGFrZXMgYSBmdW5jLCBjb252ZXJ0cyB0byBhIHN0cmluZywgdGhlbiByZWRlZmluZXMgaXQgaW4gYW4gZXZhbC4gVGhpcyBlZmZlY3RpdmVseSBhY2hpZXZlcyBkeW5hbWljIHNjb3BpbmcuIEJ5IHJlZGVmaW5pbmcgaXQgaW4gdGhpcyBzY29wZSwgSSBjYW4gYWNjZXNzIHRoZSBsb2NhbCB2YXJpYWJsZXMgaGVyZSBpbnN0ZWFkIG9mIHRoZSBkZWZhdWx0IGxleGljYWwgc2NvcGluZyBiZWhhdmlvci4gVGhlIHJlYXNvbiBJIHdhbnQgdGhpcyBpcyBzbyB0aGUgcmVwbCBoYXMgYWNjZXNzIHRvIHRoZSB2YXJpYWJsZXMgZGVmaW5lZCBpbiB0aGUgQ29kZU1pcnJvciBlZGl0b3IuXG5cbiAgICB9KTtcblxuICB9XG59XG5cbi8vIGFsbG93IHVzZXIgdG8gYWNjZXNzIHByZXZpb3VzbHkgZW50ZXJlZCBjb21tYW5kc1xudmFyIGNvbW1hbmRTdGFjayA9IFtdO1xudmFyIGNvbW1hbmRJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiByZW5kZXIodGV4dCwgb3B0aW9ucz17fSkge1xuICBpZiAodHlwZW9mIHRleHQgPT09ICdvYmplY3QnKSB7XG4gICAgdGV4dCA9IEpTT04uc3RyaW5naWZ5KHRleHQsIG51bGwsIDQpO1xuICB9IGVsc2Uge1xuICAgIHRleHQgPSBTdHJpbmcodGV4dCk7XG4gIH1cblxuICAvLyBUaGlzIHBhcnRpY3VsYXIgZXJyIG1lc3NhZ2UgaXMgcG9vci4gTWFrZSBpdCBhIGJpdCBtb3JlIGhlbHBmdWxcbiAgdGV4dCA9IHRleHQucmVwbGFjZShcbiAgICAvVW5leHBlY3RlZCBlbmQgb2YgaW5wdXQvLCBcbiAgICAnVW5leHBlY3RlZCBlbmQgb2YgaW5wdXQ6IHByb2JhYmx5IGFuIGV4dHJhIG9wZW5pbmcgYnJhY2tldCBvciBvcGVyYXRvci4nXG4gICk7XG5cbiAgaWYgKG9wdGlvbnMuYXJyb3cpXG4gICAgdGV4dCA9IGA9PiAke3RleHR9YDtcbiAgaWYgKG9wdGlvbnMuZXJyb3IpXG4gICAgdGV4dCA9IGA8c3BhbiBjbGFzcz1cImVycm9yXCI+JHt0ZXh0fTwvc3Bhbj5gO1xuICBpZiAob3B0aW9ucy5saW5lTnVtKVxuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoLyEvLCBgbGluZSAke29wdGlvbnMubGluZU51bX0gLSBgKTtcbiAgJCgnI2NvbnNvbGUgI291dHB1dCcpLmFwcGVuZChgPHA+JHt0ZXh0fTwvcD5gKTtcblxuICAvLyBzY3JvbGwgdG8gYm90dG9tIGluIG9yZGVyIHRvIHNob3cgbW9zdCByZWNlbnRcbiAgdmFyIGNvbnNvbGVET00gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29uc29sZScpO1xuICBjb25zb2xlRE9NLnNjcm9sbFRvcCA9IGNvbnNvbGVET00uc2Nyb2xsSGVpZ2h0O1xufVxuXG5mdW5jdGlvbiByZXBsKGUpIHtcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB2YXIgY29kZSA9ICQoZS50YXJnZXQpLmZpbmQoJ2lucHV0JykudmFsKCk7XG4gIGNvbW1hbmRTdGFjay51bnNoaWZ0KGNvZGUpO1xuICBjb21tYW5kU3RhY2sgPSBjb21tYW5kU3RhY2suc2xpY2UoMCwgOSk7XG4gIGNvbW1hbmRJbmRleCA9IC0xO1xuICB3cmFwTG9nT3V0cHV0KCgpID0+IHtcbiAgICAkKGUudGFyZ2V0KS5maW5kKCdpbnB1dCcpLnZhbCgnJyk7XG5cbiAgICAvL3ZhciBkZWNsYXJhdGlvbnMgZG9uJ3Qgd29yayBpbiB0aGUgUkVQTCwgc28gZ2l2ZSB0aGVtIGFuIGVycm9yXG4gICAgaWYgKGNvZGUubWF0Y2goL3Zhci8pKSByZXR1cm4gcmVuZGVyKCdkbyB2YXIgZGVjbGFyYXRpb25zIGluIHRoZSBlZGl0b3IgYWJvdmUnLCB7IGVycm9yOiB0cnVlIH0pO1xuXG4gICAgdmFyIGV2YWxFcnI7XG4gICAgdmFyIHdyYXBwZWRDb2RlID0gYHRyeXsgJHtjb2RlfVxcbiB9IGNhdGNoKGVycikgeyBldmFsRXJyID0gZXJyIH1gO1xuICAgIHRyeSB7XG4gICAgICB2YXIgb3V0cHV0ID0gZXZhbCh3cmFwcGVkQ29kZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBldmFsRXJyID0gZXJyO1xuICAgIH1cbiAgICBpZiAoZXZhbEVycikge1xuICAgICAgcmVuZGVyKGV2YWxFcnIubWVzc2FnZSwgeyBlcnJvcjogdHJ1ZSB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVuZGVyKG91dHB1dCwgeyBhcnJvdzogdHJ1ZSB9KTtcbiAgICB9XG4gIH0pO1xufVxuXG4vLyBleGVjdXRlcyBhIGZ1bmN0aW9uIGluIGEgY29udGV4dCB3aGVyZSBhbGwgY2FsbHMgdG8gY29uc29sZS5sb2cgd2lsbCByZW5kZXIgdG8gdGhlIERPTVxuZnVuY3Rpb24gd3JhcExvZ091dHB1dChmdW5jKSB7XG4gIGNvbnNvbGUubmF0aXZlTG9nID0gY29uc29sZS5sb2c7XG4gIGNvbnNvbGUubG9nID0gZnVuY3Rpb24oKSB7XG4gICAgW10uZm9yRWFjaC5jYWxsKGFyZ3VtZW50cywgbGluZSA9PiB7XG4gICAgICByZW5kZXIobGluZSk7XG4gICAgfSk7XG4gICAgY29uc29sZS5uYXRpdmVMb2coLi4uYXJndW1lbnRzKTtcbiAgfVxuICBmdW5jKCk7XG4gIGNvbnNvbGUubG9nID0gY29uc29sZS5uYXRpdmVMb2c7XG59XG5cblxuXG5cbiIsIndpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbigpIHtcblxuICB3aW5kb3cuZWRpdG9yID0gQ29kZU1pcnJvci5mcm9tVGV4dEFyZWEoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb2RlLWVkaXRvclwiKSwge1xuICAgIGxpbmVOdW1iZXJzOiB0cnVlLFxuICAgIG1vZGU6IFwiamF2YXNjcmlwdFwiLFxuICAgIG1hdGNoQnJhY2tldHM6IHRydWUsXG4gICAgYXV0b0Nsb3NlQnJhY2tldHM6IHRydWUsXG4gICAga2V5TWFwOiAnc3VibGltZScsXG4gICAgdGFiU2l6ZTogMixcbiAgICB0aGVtZTogJ3R0Y24nXG4gIH0pO1xuXG4gIHZhciB3YWl0aW5nO1xuICBlZGl0b3Iub24oXCJjaGFuZ2VcIiwgKCkgPT4ge1xuICAgIGNsZWFyVGltZW91dCh3YWl0aW5nKTtcbiAgICB3YWl0aW5nID0gc2V0VGltZW91dCh1cGRhdGVFcnJvcnMsIDgwMCk7XG4gIH0pO1xuXG4gIHZhciBzYXZlID0gcmVxdWlyZSgnLi9zYXZlJyk7XG4gIHNhdmUoZWRpdG9yKTtcblxufTtcblxudmFyIGVycldpZGdldHMgPSBbXTtcblxuZnVuY3Rpb24gY2hlY2tGb3JFcnJvcnMoKSB7XG4gIHJldHVybiBlcnJXaWRnZXRzO1xufVxuXG5mdW5jdGlvbiByZW5kZXJFcnIobGluZU51bSwgZGVzYywgY29sTnVtKSB7XG4gIGlmICghbGluZU51bSkgdGhyb3cgbmV3IEVycm9yKCdMaW5lIG51bWJlciBmb3IgcmVuZGVyRXJyIG11c3QgYmUgYSB2YWxpZCBpbnRlZ2VyLicpO1xuICB2YXIgbXNnID0gJChgXG4gICAgPGRpdiBjbGFzcz1cImxpbnQtZXJyb3JcIj5cbiAgICAgIDxzcGFuIGNsYXNzPVwibGludC1lcnJvci1pY29uXCI+ITwvc3Bhbj5cbiAgICAgICR7ZGVzY31cbiAgICA8L2Rpdj5cbiAgYClbMF07XG4gIGVycldpZGdldHMucHVzaChcbiAgICBlZGl0b3IuYWRkTGluZVdpZGdldChsaW5lTnVtIC0gMSwgbXNnLCB7IGNvdmVyR3V0dGVyOiBmYWxzZSwgbm9IU2Nyb2xsOiB0cnVlIH0pXG4gICk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUVycm9ycygpIHtcbiAgdmFyIGNvZGUgPSBlZGl0b3IuZ2V0VmFsdWUoKTtcblxuICBlcnJXaWRnZXRzLmZvckVhY2goZXJyID0+IHtcbiAgICBlZGl0b3IucmVtb3ZlTGluZVdpZGdldChlcnIpO1xuICB9KTtcbiAgZXJyV2lkZ2V0cyA9IFtdO1xuXG4gIHRyeSB7XG4gICAgdmFyIHN5bnRheCA9IGVzcHJpbWEucGFyc2UoY29kZSwgeyB0b2xlcmFudDogdHJ1ZSwgbG9jOiB0cnVlIH0pO1xuICAgIHZhciBldmFsRXJyO1xuICAgIHZhciB3cmFwcGVkQ29kZSA9IGB0cnl7ICR7Y29kZX1cXG4gfSBjYXRjaChlcnIpIHsgZXZhbEVyciA9IGVyciB9YDtcblxuICAgIGV2YWwod3JhcHBlZENvZGUpO1xuICAgIGlmIChldmFsRXJyKSB7XG4gICAgICB2YXIgc3RhY2sgPSBldmFsRXJyLnN0YWNrO1xuICAgICAgdmFyIGVyck1lc3NhZ2UgPSBldmFsRXJyLm1lc3NhZ2UgfHwgc3RhY2subWF0Y2goLy4qLylbMF07ICAgICAvLyBmaXJlZm94IHx8IGNocm9tZVxuICAgICAgdmFyIGxpbmVOdW0gPSBldmFsRXJyLmxpbmVOdW1iZXIgfHwgc3RhY2subWF0Y2goLzxhbm9ueW1vdXM+OihcXGQrKTpcXGQrLylbMV07XG4gICAgICAvLyB2YXIgY29sTnVtID0gZXZhbEVyci5jb2x1bW5OdW1iZXIgfHwgc3RhY2subWF0Y2goLzxhbm9ueW1vdXM+OlxcZCs6KFxcZCspLylbMF07XG4gICAgICByZW5kZXJFcnIobGluZU51bSwgZXJyTWVzc2FnZSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZW5kZXJFcnIoZXJyLmxpbmVOdW1iZXIsIGVyci5kZXNjcmlwdGlvbiwgZXJyLmNvbHVtbik7XG4gIH1cblxufVxuXG53aW5kb3cucmVwbGFjZUVkaXRvclRleHQgPSBmdW5jdGlvbih0ZXh0KSB7XG4gIGVkaXRvci5yZXBsYWNlUmFuZ2UoXG4gICAgdGV4dCxcbiAgICBDb2RlTWlycm9yLlBvcyhlZGl0b3IuZmlyc3RMaW5lKCktMSksXG4gICAgQ29kZU1pcnJvci5Qb3MoZWRpdG9yLmxhc3RMaW5lKCkpXG4gICk7XG59XG5cbnZhciBleGVjdXRlID0gcmVxdWlyZSgnLi9leGVjJyk7XG5leGVjdXRlKGNoZWNrRm9yRXJyb3JzKTtcbnJlcXVpcmUoJy4vcmVzaXplJyk7IiwiJChkb2N1bWVudCkucmVhZHkoZSA9PiB7XG5cbiAgdmFyIGVkaXRvckhlaWdodCA9ICQoJyNlZGl0b3Itd3JhcCcpLmNzcygnaGVpZ2h0Jyk7XG4gIHZhciBjb25zb2xlSGVpZ2h0ID0gJCgnI2NvbnNvbGUnKS5jc3MoJ2hlaWdodCcpO1xuXG4gICQoJy5yZXNpemUnKS5kcmFnZ2FibGUoe1xuICAgIGF4aXM6ICd5JyxcbiAgICBkcmFnOiBlID0+IHtcbiAgICAgIHZhciBjaGFuZ2UgPSBlLnRhcmdldC5zdHlsZS50b3A7XG4gICAgICB2YXIgb3BlciA9ICcrLSc7XG4gICAgICBpZiAoY2hhbmdlWzBdID09PSAnLScpIHtcbiAgICAgICAgY2hhbmdlID0gY2hhbmdlLnNsaWNlKDEpO1xuICAgICAgICBvcGVyID0gJy0rJztcbiAgICAgIH1cbiAgICAgICQoJyNlZGl0b3Itd3JhcCcpLmNzcygnaGVpZ2h0JywgYGNhbGMoJHtlZGl0b3JIZWlnaHR9ICR7b3BlclswXX0gJHtjaGFuZ2V9KWApO1xuICAgICAgJCgnI2NvbnNvbGUnKS5jc3MoJ2hlaWdodCcsIGBjYWxjKCR7Y29uc29sZUhlaWdodH0gJHtvcGVyWzFdfSAke2NoYW5nZX0pYCk7XG4gICAgfSxcbiAgICBzdG9wOiBlID0+IHtcbiAgICAgIGVkaXRvckhlaWdodCA9ICQoJyNlZGl0b3Itd3JhcCcpLmNzcygnaGVpZ2h0Jyk7XG4gICAgICBjb25zb2xlSGVpZ2h0ID0gJCgnI2NvbnNvbGUnKS5jc3MoJ2hlaWdodCcpO1xuICAgICAgZS50YXJnZXQuc3R5bGUudG9wID0gMDtcbiAgICAgIGVkaXRvci5yZWZyZXNoKCk7XG4gICAgfVxuICB9KVxufSk7IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihlZGl0b3IpIHtcblxuICB2YXIgcGF0aCA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZTtcblxuICAkKCcjc2F2ZScpLm9uKCdjbGljaycsIGUgPT4ge1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHBhdGgsIGVkaXRvci5nZXRWYWx1ZSgpKTtcbiAgICBhbGVydCgnUHJvZ3Jlc3Mgc2F2ZWQuJylcbiAgfSk7XG5cbiAgdmFyIHNhdmVkID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0ocGF0aCk7XG4gIGlmIChzYXZlZCkge1xuICAgIHJlcGxhY2VFZGl0b3JUZXh0KHNhdmVkKTtcbiAgfVxuXG4gICQoJyNjbGVhcicpLm9uKCdjbGljaycsIGUgPT4ge1xuICAgIGlmIChjb25maXJtKCdBcmUgeW91IHN1cmU/IFRoaXMgd2lsbCByZW1vdmUgc2F2ZWQgcHJvZ3Jlc3MuJykpIHtcbiAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKHBhdGgpO1xuICAgICAgcmVwbGFjZUVkaXRvclRleHQoJCgnI2NvZGUtZWRpdG9yJykudmFsKCkpO1xuICAgIH1cbiAgfSk7XG5cbn0iXX0=
