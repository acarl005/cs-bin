(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/home/andy/Desktop/production/cs-bin/src/exec.js":[function(require,module,exports){
function render(e){var o=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];e="object"==typeof e?JSON.stringify(e,null,4):String(e),e=e.replace(/Unexpected end of input/,"Unexpected end of input: probably an extra opening bracket or operator."),o.arrow&&(e="=> "+e),o.error&&(e='<span class="error">'+e+"</span>"),o.lineNum&&(e=e.replace(/!/,"line "+o.lineNum+" - ")),$("#console #output").append("<p>"+e+"</p>");var r=document.getElementById("console");r.scrollTop=r.scrollHeight}function repl(e){e.preventDefault();var code=$(e.target).find("input").val();commandStack.unshift(code),commandStack=commandStack.slice(0,9),commandIndex=-1,wrapLogOutput(function(){$(e.target).find("input").val("");var evalErr,wrappedCode="try{ "+code+"\n } catch(err) { evalErr = err }";try{var output=eval(wrappedCode)}catch(err){evalErr=err}evalErr?render(evalErr.message,{error:!0}):render(output,{arrow:!0})})}function wrapLogOutput(e){console.nativeLog=console.log,console.log=function(){[].forEach.call(arguments,function(e){render(e)}),console.nativeLog.apply(console,arguments)},e(),console.log=console.nativeLog}module.exports=function(hasErrors){function execute(){$("#console #output").empty();var errors=hasErrors(),error=errors[0];if(error)return render(error.node.innerText||$(error.node).text(),{error:!0,lineNum:editor.getLineNumber(error.line)+1});var code=editor.getValue();wrapLogOutput(function(){eval(code),$("#console form").off("submit"),$("#console form").on("submit",eval("("+String(repl)+")"))})}$(document).ready(function(){$("#console form").on("submit",repl),$("#execute").on("click",execute),$(window).on("keypress",function(e){e.ctrlKey&&e.keyCode&&execute()}),$("#console form").on("keydown",function(e){if(38===e.keyCode)commandIndex++;else{if(40!==e.keyCode)return"we can ignore this";commandIndex--}commandIndex=Math.min(commandStack.length-1,commandIndex),commandIndex=Math.max(-1,commandIndex),$("#console form input").val(commandStack[commandIndex])})})};var commandStack=[],commandIndex=-1;

},{}],"/home/andy/Desktop/production/cs-bin/src/repl.js":[function(require,module,exports){
function checkForErrors(){return errWidgets}function renderErr(r,e,t){if(!r)throw new Error("Line number for renderErr must be a valid integer.");var o=$('\n    <div class="lint-error">\n      <span class="lint-error-icon">!</span>\n      '+e+"\n    </div>\n  ")[0];errWidgets.push(editor.addLineWidget(r-1,o,{coverGutter:!1,noHScroll:!0}))}function updateErrors(){var code=editor.getValue();errWidgets.forEach(function(r){editor.removeLineWidget(r)}),errWidgets=[];try{var syntax=esprima.parse(code,{tolerant:!0,loc:!0}),evalErr,wrappedCode="try{ "+code+"\n } catch(err) { evalErr = err }";if(eval(wrappedCode),evalErr){var stack=evalErr.stack,errMessage=evalErr.message||stack.match(/.*/)[0],lineNum=evalErr.lineNumber||stack.match(/<anonymous>:(\d+):\d+/)[1];renderErr(lineNum,errMessage)}}catch(err){renderErr(err.lineNumber,err.description,err.column)}}window.onload=function(){window.editor=CodeMirror.fromTextArea(document.getElementById("code-editor"),{lineNumbers:!0,mode:"javascript",matchBrackets:!0,autoCloseBrackets:!0,keyMap:"sublime",tabSize:2,theme:"ttcn"});var r;editor.on("change",function(){clearTimeout(r),r=setTimeout(updateErrors,800)});var e=require("./save");e(editor)};var errWidgets=[];window.replaceEditorText=function(r){editor.replaceRange(r,CodeMirror.Pos(editor.firstLine()-1),CodeMirror.Pos(editor.lastLine()))};var execute=require("./exec");execute(checkForErrors);

},{"./exec":"/home/andy/Desktop/production/cs-bin/src/exec.js","./save":"/home/andy/Desktop/production/cs-bin/src/save.js"}],"/home/andy/Desktop/production/cs-bin/src/save.js":[function(require,module,exports){
module.exports=function(e){var o=window.location.pathname;$("#save").on("click",function(r){localStorage.setItem(o,e.getValue()),alert("Progress saved.")});var r=localStorage.getItem(o);r&&replaceEditorText(r),$("#clear").on("click",function(e){confirm("Are you sure? This will remove saved progress.")&&(localStorage.removeItem(o),replaceEditorText($("#code-editor").val()))})};

},{}]},{},["/home/andy/Desktop/production/cs-bin/src/repl.js"])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvaG9tZS9hbmR5L0Rlc2t0b3AvcHJvZHVjdGlvbi9jcy1iaW4vc3JjL2V4ZWMuanMiLCIvaG9tZS9hbmR5L0Rlc2t0b3AvcHJvZHVjdGlvbi9jcy1iaW4vc3JjL3JlcGwuanMiLCIvaG9tZS9hbmR5L0Rlc2t0b3AvcHJvZHVjdGlvbi9jcy1iaW4vc3JjL3NhdmUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQSxBQXNEQSxNQXRETSxDQUFDLENBc0RFLE1BdERLLEVBc0RFLENBdERDLEtBc0RLLEdBQU8sRUF0REgsUUFzREcsQ0F0RE0sRUFBRSxLQXNEUixHQUFBLFNBQUEsVUFBQSxNQUFHLFVBQUEsRUFFNUIsR0FEa0IsZ0JBQVQsR0FDRixLQUFLLFVBQVUsRUFBTSxLQUFNLEdBRTNCLE9BQU8sR0FJaEIsRUFBTyxFQUFLLFFBQ1YsMEJBQ0EsMkVBR0UsRUFBUSxRQUNWLEVBQUksTUFBUyxHQUNYLEVBQVEsUUFDVixFQUFJLHVCQUEwQixFQUFJLFdBQ2hDLEVBQVEsVUFDVixFQUFPLEVBQUssUUFBUSxJQUFHLFFBQVUsRUFBUSxRQUFPLFFBQ2xELEVBQUUsb0JBQW9CLE9BQU0sTUFBTyxFQUFJLE9BR3ZDLElBQUksR0FBYSxTQUFTLGVBQWUsVUFDekMsR0FBVyxVQUFZLEVBQVcsYUFHcEMsUUFBUyxNQUFLLEdBQ1osRUFBRSxnQkFDRixJQUFJLE1BQU8sRUFBRSxFQUFFLFFBQVEsS0FBSyxTQUFTLEtBQ3JDLGNBQWEsUUFBUSxNQUNyQixhQUFlLGFBQWEsTUFBTSxFQUFHLEdBQ3JDLGFBQWUsR0FDZixjQUFjLFdBQ1osRUFBRSxFQUFFLFFBQVEsS0FBSyxTQUFTLElBQUksR0FDOUIsSUFBSSxTQUNBLFlBQVcsUUFBVyxLQUFJLG1DQUM5QixLQUNFLEdBQUksUUFBUyxLQUFLLGFBQ2xCLE1BQU8sS0FDUCxRQUFVLElBRVIs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QUFDRixVQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDaEMsQ0FBQyxPQUFPLEdBQUcsRUFBRTtBQUNaLGFBQU8sR0FBRyxHQUFHLENBQUM7S0FDZjtBQUNELFFBQUksT0FBTyxFQUFFOztBQUVYLFlBQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7S0FDMUMsTUFBTTtBQUNMLFlBQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztLQUNqQztHQUNGLENBQUMsQ0FBQztDQUNKOzs7QUFHRCxTQUFTLGFBQWEsQ0FBQyxJQUFJLEVBQUU7QUFDM0IsU0FBTyxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO0FBQ2hDLFNBQU8sQ0FBQyxHQUFHLEdBQUcsWUFBVztBQUN2QixNQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsVUFBQSxJQUFJLEVBQUk7QUFDakMsWUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ2QsQ0FBQyxDQUFDO0FBQ0gsV0FBTyxDQUFDLFNBQVMsTUFBQSxDQUFqQixPQUFPLEVBQWMsU0FBUyxDQUFDLENBQUM7R0FDakMsQ0FBQTtBQUNELE1BQUksRUFBRSxDQUFDO0FBQ1AsU0FBTyxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDO0NBQ2pDIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaGFzRXJyb3JzKSB7XG4gICQoZG9jdW1lbnQpLnJlYWR5KCgpID0+IHtcblxuICAgICQoJyNjb25zb2xlIGZvcm0nKS5vbignc3VibWl0JywgcmVwbCk7XG4gICAgJCgnI2V4ZWN1dGUnKS5vbignY2xpY2snLCBleGVjdXRlKTtcbiAgICAkKHdpbmRvdykub24oJ2tleXByZXNzJywgZSA9PiB7XG4gICAgICBlLmN0cmxLZXkgJiYgZS5rZXlDb2RlICYmIGV4ZWN1dGUoKTsgICAvL2V4ZWN1dGUgaWYgdGhleSBwcmVzcyBjdHJsK2IgaW4gY2hyb21lXG4gICAgfSk7XG5cbiAgICAkKCcjY29uc29sZSBmb3JtJykub24oJ2tleWRvd24nLCBlID0+IHtcbiAgICAgIGlmIChlLmtleUNvZGUgPT09IDM4KSB7ICAvL3VwIGFycm93IGtleVxuICAgICAgICBjb21tYW5kSW5kZXgrKztcbiAgICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09PSA0MCkgeyAgLy9kb3duIGFycm93IGtleVxuICAgICAgICBjb21tYW5kSW5kZXgtLTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAnd2UgY2FuIGlnbm9yZSB0aGlzJztcbiAgICAgIH1cbiAgICAgIC8vIG1ha2Ugc3VyZSBjb21tYW5kSW5kZXggc3RheXMgaW4gcmVhc29uYWJsZSByYW5nZVxuICAgICAgY29tbWFuZEluZGV4ID0gTWF0aC5taW4oY29tbWFuZFN0YWNrLmxlbmd0aCAtIDEsIGNvbW1hbmRJbmRleCk7XG4gICAgICBjb21tYW5kSW5kZXggPSBNYXRoLm1heCgtMSwgY29tbWFuZEluZGV4KTtcbiAgICAgICQoJyNjb25zb2xlIGZvcm0gaW5wdXQnKS52YWwoY29tbWFuZFN0YWNrW2NvbW1hbmRJbmRleF0pO1xuICAgIH0pO1xuICB9KTtcblxuICBmdW5jdGlvbiBleGVjdXRlKCkge1xuICAgICQoJyNjb25zb2xlICNvdXRwdXQnKS5lbXB0eSgpO1xuICAgIHZhciBlcnJvcnMgPSBoYXNFcnJvcnMoKTtcbiAgICB2YXIgZXJyb3IgPSBlcnJvcnNbMF07XG4gICAgaWYgKGVycm9yKXtcbiAgICAgIHJldHVybiByZW5kZXIoXG4gICAgICAgIGVycm9yLm5vZGUuaW5uZXJUZXh0IHx8ICQoZXJyb3Iubm9kZSkudGV4dCgpLCAgICAvLyBjaHJvbWUgfHwgZmlyZWZveFxuICAgICAgICB7IGVycm9yOiB0cnVlLCBsaW5lTnVtOiBlZGl0b3IuZ2V0TGluZU51bWJlcihlcnJvci5saW5lKSArIDEgfVxuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgY29kZSA9IGVkaXRvci5nZXRWYWx1ZSgpO1xuXG4gICAgd3JhcExvZ091dHB1dCgoKSA9PiB7XG5cbiAgICAgIGV2YWwoY29kZSk7XG5cbiAgICAgICQoJyNjb25zb2xlIGZvcm0nKS5vZmYoJ3N1Ym1pdCcpO1xuICAgICAgJCgnI2NvbnNvbGUgZm9ybScpLm9uKCdzdWJtaXQnLCBldmFsKCcoJytTdHJpbmcocmVwbCkrJyknKSk7XG4gICAgICAvLyB0aGlzIGV2YWwvU3RyaW5nIHRoaW5nIGlzIHByZXR0eSB3ZWlyZCByaWdodD8gSXQncyBiYXNpY2FsbHkgYSBoYWNrIHRoYXQgUm9iIGFuZCBJIGRldmlzZWQgdG8gXCJjbG9uZVwiIGEgZnVuY3Rpb24uIEl0IHRha2VzIGEgZnVuYywgY29udmVydHMgdG8gYSBzdHJpbmcsIHRoZW4gcmVkZWZpbmVzIGl0IGluIGFuIGV2YWwuIFRoaXMgZWZmZWN0aXZlbHkgYWNoaWV2ZXMgZHluYW1pYyBzY29waW5nLiBCeSByZWRlZmluaW5nIGl0IGluIHRoaXMgc2NvcGUsIEkgY2FuIGFjY2VzcyB0aGUgbG9jYWwgdmFyaWFibGVzIGhlcmUgaW5zdGVhZCBvZiB0aGUgZGVmYXVsdCBsZXhpY2FsIHNjb3BpbmcgYmVoYXZpb3IuIFRoZSByZWFzb24gSSB3YW50IHRoaXMgaXMgc28gdGhlIHJlcGwgaGFzIGFjY2VzcyB0byB0aGUgdmFyaWFibGVzIGRlZmluZWQgaW4gdGhlIENvZGVNaXJyb3IgZWRpdG9yLlxuXG4gICAgfSk7XG5cbiAgfVxufVxuXG4vLyBhbGxvdyB1c2VyIHRvIGFjY2VzcyBwcmV2aW91c2x5IGVudGVyZWQgY29tbWFuZHNcbnZhciBjb21tYW5kU3RhY2sgPSBbXTtcbnZhciBjb21tYW5kSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gcmVuZGVyKHRleHQsIG9wdGlvbnM9e30pIHtcbiAgaWYgKHR5cGVvZiB0ZXh0ID09PSAnb2JqZWN0Jykge1xuICAgIHRleHQgPSBKU09OLnN0cmluZ2lmeSh0ZXh0LCBudWxsLCA0KTtcbiAgfSBlbHNlIHtcbiAgICB0ZXh0ID0gU3RyaW5nKHRleHQpO1xuICB9XG5cbiAgLy8gVGhpcyBwYXJ0aWN1bGFyIGVyciBtZXNzYWdlIGlzIHBvb3IuIE1ha2UgaXQgYSBiaXQgbW9yZSBoZWxwZnVsXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoXG4gICAgL1VuZXhwZWN0ZWQgZW5kIG9mIGlucHV0LywgXG4gICAgJ1VuZXhwZWN0ZWQgZW5kIG9mIGlucHV0OiBwcm9iYWJseSBhbiBleHRyYSBvcGVuaW5nIGJyYWNrZXQgb3Igb3BlcmF0b3IuJ1xuICApO1xuXG4gIGlmIChvcHRpb25zLmFycm93KVxuICAgIHRleHQgPSBgPT4gJHt0ZXh0fWA7XG4gIGlmIChvcHRpb25zLmVycm9yKVxuICAgIHRleHQgPSBgPHNwYW4gY2xhc3M9XCJlcnJvclwiPiR7dGV4dH08L3NwYW4+YDtcbiAgaWYgKG9wdGlvbnMubGluZU51bSlcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8hLywgYGxpbmUgJHtvcHRpb25zLmxpbmVOdW19IC0gYCk7XG4gICQoJyNjb25zb2xlICNvdXRwdXQnKS5hcHBlbmQoYDxwPiR7dGV4dH08L3A+YCk7XG5cbiAgLy8gc2Nyb2xsIHRvIGJvdHRvbSBpbiBvcmRlciB0byBzaG93IG1vc3QgcmVjZW50XG4gIHZhciBjb25zb2xlRE9NID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnNvbGUnKTtcbiAgY29uc29sZURPTS5zY3JvbGxUb3AgPSBjb25zb2xlRE9NLnNjcm9sbEhlaWdodDtcbn1cblxuZnVuY3Rpb24gcmVwbChlKSB7XG4gIGUucHJldmVudERlZmF1bHQoKTtcbiAgdmFyIGNvZGUgPSAkKGUudGFyZ2V0KS5maW5kKCdpbnB1dCcpLnZhbCgpO1xuICBjb21tYW5kU3RhY2sudW5zaGlmdChjb2RlKTtcbiAgY29tbWFuZFN0YWNrID0gY29tbWFuZFN0YWNrLnNsaWNlKDAsIDkpO1xuICBjb21tYW5kSW5kZXggPSAtMTtcbiAgd3JhcExvZ091dHB1dCgoKSA9PiB7XG4gICAgJChlLnRhcmdldCkuZmluZCgnaW5wdXQnKS52YWwoJycpO1xuICAgIHZhciBldmFsRXJyO1xuICAgIHZhciB3cmFwcGVkQ29kZSA9IGB0cnl7ICR7Y29kZX1cXG4gfSBjYXRjaChlcnIpIHsgZXZhbEVyciA9IGVyciB9YDtcbiAgICB0cnkge1xuICAgICAgdmFyIG91dHB1dCA9IGV2YWwod3JhcHBlZENvZGUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgZXZhbEVyciA9IGVycjtcbiAgICB9XG4gICAgaWYgKGV2YWxFcnIpIHtcblxuICAgICAgcmVuZGVyKGV2YWxFcnIubWVzc2FnZSwgeyBlcnJvcjogdHJ1ZSB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVuZGVyKG91dHB1dCwgeyBhcnJvdzogdHJ1ZSB9KTtcbiAgICB9XG4gIH0pO1xufVxuXG4vLyBleGVjdXRlcyBhIGZ1bmN0aW9uIGluIGEgY29udGV4dCB3aGVyZSBhbGwgY2FsbHMgdG8gY29uc29sZS5sb2cgd2lsbCByZW5kZXIgdG8gdGhlIERPTVxuZnVuY3Rpb24gd3JhcExvZ091dHB1dChmdW5jKSB7XG4gIGNvbnNvbGUubmF0aXZlTG9nID0gY29uc29sZS5sb2c7XG4gIGNvbnNvbGUubG9nID0gZnVuY3Rpb24oKSB7XG4gICAgW10uZm9yRWFjaC5jYWxsKGFyZ3VtZW50cywgbGluZSA9PiB7XG4gICAgICByZW5kZXIobGluZSk7XG4gICAgfSk7XG4gICAgY29uc29sZS5uYXRpdmVMb2coLi4uYXJndW1lbnRzKTtcbiAgfVxuICBmdW5jKCk7XG4gIGNvbnNvbGUubG9nID0gY29uc29sZS5uYXRpdmVMb2c7XG59XG5cblxuXG5cbiIsIndpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbigpIHtcblxuICB3aW5kb3cuZWRpdG9yID0gQ29kZU1pcnJvci5mcm9tVGV4dEFyZWEoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb2RlLWVkaXRvclwiKSwge1xuICAgIGxpbmVOdW1iZXJzOiB0cnVlLFxuICAgIG1vZGU6IFwiamF2YXNjcmlwdFwiLFxuICAgIG1hdGNoQnJhY2tldHM6IHRydWUsXG4gICAgYXV0b0Nsb3NlQnJhY2tldHM6IHRydWUsXG4gICAga2V5TWFwOiAnc3VibGltZScsXG4gICAgdGFiU2l6ZTogMixcbiAgICB0aGVtZTogJ3R0Y24nXG4gIH0pO1xuXG4gIHZhciB3YWl0aW5nO1xuICBlZGl0b3Iub24oXCJjaGFuZ2VcIiwgKCkgPT4ge1xuICAgIGNsZWFyVGltZW91dCh3YWl0aW5nKTtcbiAgICB3YWl0aW5nID0gc2V0VGltZW91dCh1cGRhdGVFcnJvcnMsIDgwMCk7XG4gIH0pO1xuXG4gIHZhciBzYXZlID0gcmVxdWlyZSgnLi9zYXZlJyk7XG4gIHNhdmUoZWRpdG9yKTtcblxufTtcblxudmFyIGVycldpZGdldHMgPSBbXTtcblxuZnVuY3Rpb24gY2hlY2tGb3JFcnJvcnMoKSB7XG4gIHJldHVybiBlcnJXaWRnZXRzO1xufVxuXG5mdW5jdGlvbiByZW5kZXJFcnIobGluZU51bSwgZGVzYywgY29sTnVtKSB7XG4gIGlmICghbGluZU51bSkgdGhyb3cgbmV3IEVycm9yKCdMaW5lIG51bWJlciBmb3IgcmVuZGVyRXJyIG11c3QgYmUgYSB2YWxpZCBpbnRlZ2VyLicpO1xuICB2YXIgbXNnID0gJChgXG4gICAgPGRpdiBjbGFzcz1cImxpbnQtZXJyb3JcIj5cbiAgICAgIDxzcGFuIGNsYXNzPVwibGludC1lcnJvci1pY29uXCI+ITwvc3Bhbj5cbiAgICAgICR7ZGVzY31cbiAgICA8L2Rpdj5cbiAgYClbMF07XG4gIGVycldpZGdldHMucHVzaChcbiAgICBlZGl0b3IuYWRkTGluZVdpZGdldChsaW5lTnVtIC0gMSwgbXNnLCB7IGNvdmVyR3V0dGVyOiBmYWxzZSwgbm9IU2Nyb2xsOiB0cnVlIH0pXG4gICk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUVycm9ycygpIHtcbiAgdmFyIGNvZGUgPSBlZGl0b3IuZ2V0VmFsdWUoKTtcblxuICBlcnJXaWRnZXRzLmZvckVhY2goZXJyID0+IHtcbiAgICBlZGl0b3IucmVtb3ZlTGluZVdpZGdldChlcnIpO1xuICB9KTtcbiAgZXJyV2lkZ2V0cyA9IFtdO1xuXG4gIHRyeSB7XG4gICAgdmFyIHN5bnRheCA9IGVzcHJpbWEucGFyc2UoY29kZSwgeyB0b2xlcmFudDogdHJ1ZSwgbG9jOiB0cnVlIH0pO1xuICAgIHZhciBldmFsRXJyO1xuICAgIHZhciB3cmFwcGVkQ29kZSA9IGB0cnl7ICR7Y29kZX1cXG4gfSBjYXRjaChlcnIpIHsgZXZhbEVyciA9IGVyciB9YDtcblxuICAgIGV2YWwod3JhcHBlZENvZGUpO1xuICAgIGlmIChldmFsRXJyKSB7XG4gICAgICB2YXIgc3RhY2sgPSBldmFsRXJyLnN0YWNrO1xuICAgICAgdmFyIGVyck1lc3NhZ2UgPSBldmFsRXJyLm1lc3NhZ2UgfHwgc3RhY2subWF0Y2goLy4qLylbMF07ICAgICAvLyBmaXJlZm94IHx8IGNocm9tZVxuICAgICAgdmFyIGxpbmVOdW0gPSBldmFsRXJyLmxpbmVOdW1iZXIgfHwgc3RhY2subWF0Y2goLzxhbm9ueW1vdXM+OihcXGQrKTpcXGQrLylbMV07XG4gICAgICAvLyB2YXIgY29sTnVtID0gZXZhbEVyci5jb2x1bW5OdW1iZXIgfHwgc3RhY2subWF0Y2goLzxhbm9ueW1vdXM+OlxcZCs6KFxcZCspLylbMF07XG4gICAgICByZW5kZXJFcnIobGluZU51bSwgZXJyTWVzc2FnZSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZW5kZXJFcnIoZXJyLmxpbmVOdW1iZXIsIGVyci5kZXNjcmlwdGlvbiwgZXJyLmNvbHVtbik7XG4gIH1cblxufVxuXG53aW5kb3cucmVwbGFjZUVkaXRvclRleHQgPSBmdW5jdGlvbih0ZXh0KSB7XG4gIGVkaXRvci5yZXBsYWNlUmFuZ2UoXG4gICAgdGV4dCxcbiAgICBDb2RlTWlycm9yLlBvcyhlZGl0b3IuZmlyc3RMaW5lKCktMSksXG4gICAgQ29kZU1pcnJvci5Qb3MoZWRpdG9yLmxhc3RMaW5lKCkpXG4gICk7XG59XG5cbnZhciBleGVjdXRlID0gcmVxdWlyZSgnLi9leGVjJyk7XG5leGVjdXRlKGNoZWNrRm9yRXJyb3JzKTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGVkaXRvcikge1xuXG4gIHZhciBwYXRoID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lO1xuXG4gICQoJyNzYXZlJykub24oJ2NsaWNrJywgZSA9PiB7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0ocGF0aCwgZWRpdG9yLmdldFZhbHVlKCkpO1xuICAgIGFsZXJ0KCdQcm9ncmVzcyBzYXZlZC4nKVxuICB9KTtcblxuICB2YXIgc2F2ZWQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShwYXRoKTtcbiAgaWYgKHNhdmVkKSB7XG4gICAgcmVwbGFjZUVkaXRvclRleHQoc2F2ZWQpO1xuICB9XG5cbiAgJCgnI2NsZWFyJykub24oJ2NsaWNrJywgZSA9PiB7XG4gICAgaWYgKGNvbmZpcm0oJ0FyZSB5b3Ugc3VyZT8gVGhpcyB3aWxsIHJlbW92ZSBzYXZlZCBwcm9ncmVzcy4nKSkge1xuICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0ocGF0aCk7XG4gICAgICByZXBsYWNlRWRpdG9yVGV4dCgkKCcjY29kZS1lZGl0b3InKS52YWwoKSk7XG4gICAgfVxuICB9KTtcblxufSJdfQ==
