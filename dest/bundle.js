(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/home/andy/Documents/production/cs-bin/src/exec.js":[function(require,module,exports){
function render(e){var o=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];e="object"==typeof e?JSON.stringify(e,null,4):String(e),e=e.replace(/Unexpected end of input/,"Unexpected end of input: probably an extra opening bracket or operator."),o.arrow&&(e="=> "+e),o.error&&(e='<span class="error">'+e+"</span>"),o.lineNum&&(e=e.replace(/!/,"line "+o.lineNum+" - ")),$("#console #output").append("<p>"+e+"</p>");var r=document.getElementById("console");r.scrollTop=r.scrollHeight}function repl(e){e.preventDefault();var code=$(e.target).find("input").val();commandStack.unshift(code),commandStack=commandStack.slice(0,9),commandIndex=-1,wrapLogOutput(function(){if($(e.target).find("input").val(""),code.match(/var/))return render("do var declarations in the editor above",{error:!0});var evalErr,wrappedCode="try{ "+code+"\n } catch(err) { evalErr = err }";try{var output=eval(wrappedCode)}catch(err){evalErr=err}evalErr?render(evalErr.message,{error:!0}):render(output,{arrow:!0})})}function wrapLogOutput(e){console.nativeLog=console.log,console.log=function(){[].forEach.call(arguments,function(e){render(e)}),console.nativeLog.apply(console,arguments)},e(),console.log=console.nativeLog}module.exports=function(hasErrors){function execute(){$("#console #output").empty();var errors=hasErrors(),error=errors[0];if(error)return render(error.node.innerText||$(error.node).text(),{error:!0,lineNum:editor.getLineNumber(error.line)+1});var code=editor.getValue();return wrapLogOutput(function(){eval(code),$("#console form").off("submit"),$("#console form").on("submit",eval("("+String(repl)+")"))}),!0}$(document).ready(function(){$("#console form").on("submit",repl),$("#console").on("click",function(e){$("input").focus()}),$("#execute").on("click",execute),$(window).on("keypress",function(e){e.ctrlKey&&e.keyCode&&execute()&&showConsole()}),$("#console form").on("keydown",function(e){if(38===e.keyCode)commandIndex++;else{if(40!==e.keyCode)return"we can ignore this";commandIndex--}commandIndex=Math.min(commandStack.length-1,commandIndex),commandIndex=Math.max(-1,commandIndex),$("#console form input").val(commandStack[commandIndex])})})};var commandStack=[],commandIndex=-1;

},{}],"/home/andy/Documents/production/cs-bin/src/repl.js":[function(require,module,exports){
function checkForErrors(){return errWidgets}function renderErr(e,r,o){if(!e)throw new Error("Line number for renderErr must be a valid integer.");var t=$('\n    <div class="lint-error">\n      <span class="lint-error-icon">!</span>\n      '+r+"\n    </div>\n  ")[0];errWidgets.push(editor.addLineWidget(e-1,t,{coverGutter:!1,noHScroll:!0}))}function updateErrors(){var e=editor.getValue();errWidgets.forEach(function(e){editor.removeLineWidget(e)}),errWidgets=[];try{esprima.parse(e,{tolerant:!1,loc:!0});webWorker.postMessage(e),ps=setTimeout(killWorker,TIMEOUT)}catch(r){renderErr(r.lineNumber,r.description,r.column)}}function killWorker(){webWorker.terminate(),renderErr(1,"The code is taking a while. You might have an infinite loop."),spawnWorker()}function spawnWorker(){window.webWorker=new Worker("worker.js"),webWorker.onmessage=function(e){e.data.message&&renderErr(e.data.lineNumber,e.data.message),clearTimeout(ps)}}var TIMEOUT=800,ps;spawnWorker(),window.onload=function(){window.editor=CodeMirror.fromTextArea(document.getElementById("code-editor"),{lineNumbers:!0,mode:"javascript",matchBrackets:!0,autoCloseBrackets:!0,keyMap:"sublime",tabSize:2,theme:"ttcn"});var e;editor.on("change",function(){clearTimeout(e),e=setTimeout(updateErrors,TIMEOUT)});var r=require("./save");r(editor)};var errWidgets=[];window.replaceEditorText=function(e){editor.replaceRange(e,CodeMirror.Pos(editor.firstLine()-1),CodeMirror.Pos(editor.lastLine()))};var execute=require("./exec");execute(checkForErrors),require("./resize");

},{"./exec":"/home/andy/Documents/production/cs-bin/src/exec.js","./resize":"/home/andy/Documents/production/cs-bin/src/resize.js","./save":"/home/andy/Documents/production/cs-bin/src/save.js"}],"/home/andy/Documents/production/cs-bin/src/resize.js":[function(require,module,exports){
function pxToNum(e){return+e.slice(0,-2)}var refreshHeights,editorHeight,consoleHeight;$(document).ready(function(e){editorHeight=$("#editor-wrap").css("height"),consoleHeight=$("#console").css("height"),refreshHeights=function(){editorHeight=$("#editor-wrap").css("height"),consoleHeight=$("#console").css("height")},$(".resize").draggable({axis:"y",drag:function(e){var o=e.target.style.top;if(!(pxToNum(o)+pxToNum(editorHeight)>window.innerHeight-50)){var t="+-";"-"===o[0]&&(o=o.slice(1),t="-+"),$("#editor-wrap").css("height","calc("+editorHeight+" "+t[0]+" "+o+")"),$("#console").css("height","calc("+consoleHeight+" "+t[1]+" "+o+")")}},stop:function(e){refreshHeights(),e.target.style.top=0,editor.refresh()}}),hideConsole(),$("#execute").on("click",showConsole),$("#close").on("click",hideConsole)}),window.hideConsole=function(){$("#black-stuff").hide(),$("#editor-wrap").css("height","100vh");try{editor.refresh()}catch(e){}},window.showConsole=function(){"none"===$("#black-stuff").css("display")&&($("#black-stuff").show(),$("#console").css("height","33.5vh"),$("#editor-wrap").css("height","65vh"),refreshHeights(),editor.refresh())};

},{}],"/home/andy/Documents/production/cs-bin/src/save.js":[function(require,module,exports){
module.exports=function(e){var o=window.location.pathname;$("#save").on("click",function(r){localStorage.setItem(o,e.getValue()),alert("Progress saved.")});var r=localStorage.getItem(o);r&&replaceEditorText(r),$("#clear").on("click",function(e){confirm("Are you sure? This will remove saved progress.")&&(localStorage.removeItem(o),replaceEditorText($("#code-editor").val()))})};

},{}]},{},["/home/andy/Documents/production/cs-bin/src/repl.js"])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
