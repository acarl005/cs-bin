(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/home/andy/Desktop/production/cs-bin/src/exec.js":[function(require,module,exports){
module.exports = function (hasErrors) {
  $(document).ready(function () {

    $('#console form').on('submit', repl);
    $('#execute').on('click', execute);
    $(window).on('keypress', function (e) {
      e.ctrlKey && e.keyCode && execute(); //execute if they press ctrl+b in chrome
    });

    $('#console form').on('keydown', function (e) {
      if (e.keyCode === 38) {
        //up arrow key
        commandIndex++;
      } else if (e.keyCode === 40) {
        //down arrow key
        commandIndex--;
      } else {
        return 'we can ignore this';
      }
      // make sure commandIndex stays in reasonable range
      commandIndex = Math.min(commandStack.length - 1, commandIndex);
      commandIndex = Math.max(-1, commandIndex);
      $('#console form input').val(commandStack[commandIndex]);
    });
  });

  function execute() {
    $('#console #output').empty();
    var errors = hasErrors();

    if (errors[0]) {
      return render(errors[0].node.innerText || $(errors[0].node).text(), // chrome || firefox
      { error: true });
    }

    var code = editor.getValue();

    wrapLogOutput(function () {

      eval(code);

      $('#console form').off('submit');
      $('#console form').on('submit', eval('(' + String(repl) + ')'));
      // this eval/String thing is pretty weird right? It's basically a hack that Rob and I devised to "clone" a function. It takes a func, converts to a string, then redefines it in an eval. This effectively achieves dynamic scoping. By redefining it in this scope, I can access the local variables here instead of the default lexical scoping behavior. The reason I want this is so the repl has access to the variables defined in the CodeMirror editor.
    });
  }
};

// allow user to access previously entered commands
var commandStack = [];
var commandIndex = -1;

function render(text) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  if (typeof text === 'object') {
    text = JSON.stringify(text, null, 4);
  } else {
    text = String(text);
  }

  // This particular err message is poor. Make it a bit more helpful
  text = text.replace(/Unexpected end of input/, 'Unexpected end of input: probably an extra opening bracket or operator.');

  if (options.arrow) text = '=> ' + text;
  if (options.error) text = '<span class="error">' + text + '</span>';
  $('#console #output').append('<p>' + text + '</p>');

  // scroll to bottom in order to show most recent
  var consoleDOM = document.getElementById('console');
  consoleDOM.scrollTop = consoleDOM.scrollHeight;
}

function repl(e) {
  e.preventDefault();
  var code = $(e.target).find('input').val();
  commandStack.unshift(code);
  commandStack = commandStack.slice(0, 9);
  commandIndex = -1;
  wrapLogOutput(function () {
    $(e.target).find('input').val('');
    var evalErr;
    var wrappedCode = 'try{ ' + code + '\n } catch(err) { evalErr = err }';
    try {
      var output = eval(wrappedCode);
    } catch (err) {
      evalErr = err;
    }
    if (evalErr) {

      render(evalErr.message, { error: true });
    } else {
      render(output, { arrow: true });
    }
  });
}

// executes a function in a context where all calls to console.log will render to the DOM
function wrapLogOutput(func) {
  console.nativeLog = console.log;
  console.log = function () {
    [].forEach.call(arguments, function (line) {
      render(line);
    });
    console.nativeLog.apply(console, arguments);
  };
  func();
  console.log = console.nativeLog;
}

},{}],"/home/andy/Desktop/production/cs-bin/src/repl.js":[function(require,module,exports){
window.onload = function () {

  window.editor = CodeMirror.fromTextArea(document.getElementById("code-editor"), {
    lineNumbers: true,
    mode: "javascript",
    matchBrackets: true,
    autoCloseBrackets: true,
    keyMap: 'sublime',
    tabSize: 2,
    theme: 'ttcn'
  });

  var waiting;
  editor.on("change", function () {
    clearTimeout(waiting);
    waiting = setTimeout(updateErrors, 800);
  });

  var save = require('./save');
  save(editor);
};

var errWidgets = [];

function checkForErrors() {
  return errWidgets;
}

function renderErr(lineNum, desc, colNum) {
  if (!lineNum) throw new Error('Line number for renderErr must be a valid integer.');
  var msg = $("\n    <div class=\"lint-error\">\n      <span class=\"lint-error-icon\">!</span>\n      " + desc + "\n    </div>\n  ")[0];
  errWidgets.push(editor.addLineWidget(lineNum - 1, msg, { coverGutter: false, noHScroll: true }));
}

function updateErrors() {
  var code = editor.getValue();

  errWidgets.forEach(function (err) {
    editor.removeLineWidget(err);
  });
  errWidgets = [];

  try {
    var syntax = esprima.parse(code, { tolerant: true, loc: true });
    var evalErr;
    var wrappedCode = "try{ " + code + "\n } catch(err) { evalErr = err }";

    eval(wrappedCode);
    if (evalErr) {
      var stack = evalErr.stack;
      var errMessage = evalErr.message || stack.match(/.*/)[0]; // firefox || chrome
      var lineNum = evalErr.lineNumber || stack.match(/<anonymous>:(\d+):\d+/)[1];
      // var colNum = evalErr.columnNumber || stack.match(/<anonymous>:\d+:(\d+)/)[0];
      renderErr(lineNum, errMessage);
    }
  } catch (err) {
    renderErr(err.lineNumber, err.description, err.column);
  }
}

window.replaceEditorText = function (text) {
  editor.replaceRange(text, CodeMirror.Pos(editor.firstLine() - 1), CodeMirror.Pos(editor.lastLine()));
};

var execute = require('./exec');
execute(checkForErrors);

},{"./exec":"/home/andy/Desktop/production/cs-bin/src/exec.js","./save":"/home/andy/Desktop/production/cs-bin/src/save.js"}],"/home/andy/Desktop/production/cs-bin/src/save.js":[function(require,module,exports){
module.exports = function (editor) {

  var path = window.location.pathname;

  $('#save').on('click', function (e) {
    localStorage.setItem(path, editor.getValue());
    alert('Progress saved.');
  });

  var saved = localStorage.getItem(path);
  if (saved) {
    replaceEditorText(saved);
  }

  $('#clear').on('click', function (e) {
    if (confirm('Are you sure? This will remove saved progress.')) {
      localStorage.removeItem(path);
      window.location.reload();
    }
  });
};

},{}]},{},["/home/andy/Desktop/production/cs-bin/src/repl.js"])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
